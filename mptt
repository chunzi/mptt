#!/usr/bin/perl
use strict;
use warnings;
use 5.008001;
use MP3::Tag;
use Path::Class;
use Getopt::Std;
use Encode;
binmode STDOUT, ":utf8";

my %options = ();
getopts("a:b:y:g:s:d:iouvz",\%options) or die "wrong options\n";

# where we are
my $pwd = dir('.')->absolute;

# get the mp3 meta info
my @mp3 = from_pwd();
if ( $options{'i'} ){
    my @mp3_from_stdin = from_stdin();
    append_path_by_track(\@mp3_from_stdin, \@mp3);
    @mp3 = @mp3_from_stdin;
}
my $total_track = scalar @mp3;

# iconv
if ( $options{'z'} ){
    foreach my $mp3 ( @mp3 ){
        foreach my $k ( qw/artist album title/ ){
            $mp3->{$k} = iconv( $mp3->{$k}, 'gbk' ); 
        }
    }
}

# default show tidy meta
# if give -o then show original - untouched
unless ( $options{'o'} ){
    @mp3 = map{ tidy($_) } @mp3;
}

# list the tracks
my $max = max_length( \@mp3 );
my @cols = qw( artist album track title year genre);
my $format = sprintf "%%-%ds # %%-%ds # %%%ds # %%-%ss # %%-%ds # %%-%ds\n", map { $max->{$_} } @cols;
foreach my $mp3 ( @mp3 ){
    printf $format, map { ( not defined $_ or $_ eq '' ) ? '-' : $_ }
        $mp3->{'artist'}, $mp3->{'album'}, $mp3->{'track'}, $mp3->{'title'}, $mp3->{'year'}, $mp3->{'genre'};
}


# update tag
if ( $options{'u'} ){
    print "\n";
    my $cover; 
    my $coverfile = $pwd->file('cover.jpg');
    if ( -f $coverfile ){
        $cover = do { my $f; open $f, '<', "$coverfile" and binmode $f or die; undef $/; <$f>};
        print "cover.jpg loaded\n";
    } 
    map { update($_, $cover) } @mp3;
}

exit(0);


# functions below
sub from_stdin {
    my @mp3;
    while(<>){
        chomp;
        my $mp3 = {};
        if ( /#/ ){
            my @cols = map { s/^\s+|\s+$//g; $_ } split(/\#/, $_);
            $mp3->{'artist'} = $cols[0];
            $mp3->{'album'} = $cols[1];
            $mp3->{'track'} = $cols[2];
            $mp3->{'title'} = $cols[3];
            $mp3->{'year'} = $cols[4];
            $mp3->{'genre'} = $cols[5];
        }else{
            my @cols = map { s/^\s+|\s+$//g; $_ } split(/\s+/, $_, 2);
            my ( $t1, $t2 ) = split(/\//, $cols[0]);
            $t1 =~ s/\D//g;
            $t1 += 0;
            $mp3->{'track'} = $t1;
            $mp3->{'title'} = $cols[1]; 
        }
        push @mp3, $mp3;
    }
    return @mp3;
}

sub from_pwd {
    my @mp3 = map { path2mp3("$_") } grep { /\.mp3$/i } $pwd->children;
    return @mp3;
}

sub append_path_by_track {
    my $mp3_from_stdin = shift;
    my $mp3_from_pwd = shift;
    my $tp = {};
    foreach ( @$mp3_from_pwd ){
        my ( $t1, $t2 ) = split(/\//, $_->{'track'} );
        $tp->{$t1} = $_->{'path'};
    }
    foreach ( @$mp3_from_stdin ){
        my ( $t1, $t2 ) = split(/\//, $_->{'track'} );
        $_->{'path'} = $tp->{$t1};
    }
}

sub update {
    my $mp3 = shift;
    my $cover = shift;
    
    my $mt = MP3::Tag->new($mp3->{'path'});
    my @tags = $mt->get_tags;

    # remove all old tags
    if ( exists $mt->{'ID3v1'}) {
        $mt->{'ID3v1'}->remove_tag();
    }
    if ( exists $mt->{'ID3v2'}) {
        $mt->{'ID3v2'}->remove_tag();
    }

    # new tag, 3 means 'utf-8'
    my $id3v2 = $mt->new_tag('ID3v2');
    if ( $options{'v'} ){
        $id3v2->add_frame("TPE1", 3, $mp3->{'artist'}); # artist
        $id3v2->add_frame("TPE2", 3, 'Various Artists'); # album artist
    }else{
        $id3v2->add_frame("TPE2", 3, $mp3->{'artist'}); # album artist
    }
    if ( $options{'d'} ){
        $id3v2->add_frame("TPOS", 3, $options{'d'});
    }
    $id3v2->add_frame("TALB", 3, $mp3->{'album'});
    $id3v2->add_frame("TRCK", 3, $mp3->{'track'});
    $id3v2->add_frame("TIT2", 3, $mp3->{'title'});
    $id3v2->add_frame("TYER", 3, $mp3->{'year'});
    $id3v2->add_frame("TCON", 3, $mp3->{'genre'});

    $id3v2->frame_select('APIC', '', undef, $cover ) if $cover;

    # save
    $id3v2->write_tag;
    $mt->close;
    printf "U %s\n", $mp3->{'path'};
}


sub path2mp3 {
    my $path = shift;

    my $mt = MP3::Tag->new($path);
    $mt->config("autoinfo","ID3v2","ID3v1","filename");
    my ( $title, $track, $artist, $album, $comment, $year, $genre ) = $mt->autoinfo();
    
    my $mp3 = { path => $path };
    $mp3->{'title'} = $title;
    $mp3->{'track'} = $track;
    $mp3->{'artist'} = $artist;
    $mp3->{'album'} = $album;
    $mp3->{'year'} = $year;
    $mp3->{'genre'} = $genre;
    return $mp3;
}

sub tidy {
    my $mp3 = shift;
    $mp3->{'artist'} = $options{'a'} if $options{'a'};
    $mp3->{'album'} = $options{'b'} if $options{'b'};
    $mp3->{'year'} = $options{'y'} if $options{'y'};
    $mp3->{'genre'} = $options{'g'} if $options{'g'};

    if ( $options{'s'} ){
        my $eval = $options{'s'};
        $eval =~ s/\#p\b/\$mp3->{'path'} /g;
        $eval =~ s/\#a\b/\$mp3->{'artist'} /g;
        $eval =~ s/\#b\b/\$mp3->{'album'} /g;
        $eval =~ s/\#k\b/\$mp3->{'track'} /g;
        $eval =~ s/\#t\b/\$mp3->{'title'} /g;
        $eval =~ s/\#y\b/\$mp3->{'year'} /g;
        $eval =~ s/\#g\b/\$mp3->{'genre'} /g;
        eval $eval;
        die "eval failed: $@\n" if $@;
    }

    my ( $t1, $t2 ) = split(/\//, $mp3->{'track'});
    $t1 += 0;
    $mp3->{'track'} = join('/', $t1, $total_track);

    return $mp3;
}

sub max_length {
    my $mp3s = shift;
    my $max = {};
    foreach my $mp3 ( @$mp3s ){
        foreach ( keys %$mp3 ){
            my $len = length $mp3->{$_};
            if ( exists $max->{$_} ){
                $max->{$_} = $len if $len >= $max->{$_};
            }else{
                $max->{$_} = $len;
            }
        }
    }
    return $max;
}

sub iconv {
    my $string = shift;
    my $charset = shift;

    Encode::_utf8_off($string); 
    $string = encode('utf-8', decode($charset, $string) );
    Encode::_utf8_on( $string ) if not Encode::is_utf8( $string );
    return $string;
}

__END__

=head1 NAME

mptt - tidy the mp3 file's tag 

=head1 INSTALL

  perl Makefile.PL
  make
  sudo make install

=head1 SYNOPSIS

  cd new-mp3-album/
  mptt # view the current mp3 tags for mp3 files
  mptt -a 'Michael Jackson' -b 'Dangerous' # set artist and album name
  mptt -a 'Michael Jackson' -b 'Dangerous' -u # update
  ...

=head1 DESCRIPTION

See L<README.mkdn> for details.

=head1 LICENSE

same as Perl.

=head1 AUTHOR

chunzi <chunzi@gmail.com>
twitter @chunzi

=cut

