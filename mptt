#!/usr/bin/perl
use strict;
use warnings;
use 5.008001;
use Getopt::Long;
use Pod::Usage;
use MP3::Tag;
use Path::Class;
use YAML::Syck;
use File::Basename;
use Encode;
use Data::Dumper;
use Image::Size;
use Lingua::ZH::HanConvert qw/ simple /;
use File::Copy;
binmode STDOUT, ":utf8";
our $VERSION = '0.02';

my %options = ();
GetOptions(
    "quite|q"    => \$options{"quite"},
    "diff|f"     => \$options{"diff"},
    "simple|s"   => \$options{"simple"},
    "artist|a=s" => \$options{"artist"},
    "album|b=s"  => \$options{"album"},
    "year|y=i"   => \$options{"year"},
    "genre|g=s"  => \$options{"genre"},
    "disk|d=s"   => \$options{"disk"},
    "various|v"  => \$options{"various"},
    "iconv|i=s"  => \$options{"iconv"},
    "gbk"        => \$options{"gbk"},
    "big5"       => \$options{"big5"},
    "eval|e=s"   => \$options{"eval"},
    "update|u"   => \$options{"update"},
    "help|h"     => \$options{"help"},
) or pod2usage(2);
pod2usage(1) if $options{"help"};

#-------------------------------------
# read current directory
my $pwd = dir('.')->absolute;
my @files = $pwd->children;

# rename .m3u as .m3u.no
# don't want itune read from this useless list
map { move( $_, $_.'.no' ) } grep { /\.m3u$/i } @files;

# all the mp3 files found
my @mp3 = map { path2mp3("$_") } grep { /\.mp3$/i } @files;
my $total_tracks = scalar @mp3;

# jpeg files may use as cover.jpg
my @jpg = grep { /\.jpe?g$/i } @files;
my $cover = $pwd->file('cover.jpg');
( $cover ) = grep { /(?:cover|front|thumb)/i } @jpg unless -f $cover;
$cover = shift @jpg if not defined $cover or not -f $cover;

my $meta_file = $pwd->file('meta.yaml');


#-------------------------------------
unless ( $options{'quite'} ){
    printf "# pwd: %s\n", decode_utf8( $pwd );
    printf "# found: meta.yaml\n" if -f $meta_file;
    if ( defined $cover and -f $cover ){
        my ( $width, $height ) = imgsize("$cover");
        printf "# cover: %s - %dx%d\n", $cover->basename, $width, $height;
    }
    #map { printf "%s\n", $_->{'name'} } @mp3;
    print "\n";
}


#-------------------------------------
if ( $options{'diff'} ){
    print "# old meta\n";
    show(@mp3);
    print "\n# new meta\n";
}


#-------------------------------------
if ( -f $meta_file ){
    local $YAML::Syck::ImplicitUnicode = 1;
    my $meta = LoadFile( $meta_file );
    foreach my $mp3 ( @mp3 ) {
        my ( $song ) = grep { $_->{'filename'} eq $mp3->{'name'} }  @{$meta->{'songs'}};
        if ( $song ){
            map { $mp3->{$_} = $meta->{$_} } qw/ artist album year /;
            map { $mp3->{$_} = $song->{$_} } qw/ title track /;
        }
    }
}

#-------------------------------------
# convert the charset encodings
if ( $options{'gbk'} || $options{'big5'} || $options{'iconv'} ){
    my $charset = 'utf-8';
    $charset = 'gbk' if $options{'gbk'};
    $charset = 'big5' if $options{'big5'};
    $charset = $options{'iconv'} if $options{'iconv'};
    foreach my $mp3 ( @mp3 ){
        foreach my $k ( qw/artist album title year genre/ ){
            $mp3->{$k} = iconv( $mp3->{$k}, $charset ); 
        }
    }
}


#-------------------------------------
map { $_->{'year'} = $options{'year'} } @mp3 if $options{'year'};
map { $_->{'genre'} = $options{'genre'} } @mp3 if $options{'genre'};

if ( $options{'artist'} ){
    my $artist = decode_utf8( $options{'artist'} );
    map { $_->{'artist'} = $artist } @mp3;
}

if ( $options{'album'} ){
    my $album = decode_utf8( $options{'album'} );
    map { $_->{'album'} = $album } @mp3;
}

if ( $options{'eval'} ){
    my $eval = $options{'eval'};
    $eval =~ s/\#a\b/\$_->{'artist'} /g;
    $eval =~ s/\#b\b/\$_->{'album'} /g;
    $eval =~ s/\#t\b/\$_->{'title'} /g;
    $eval =~ s/\#k\b/\$_->{'track'} /g;
    map { 
        eval $eval;
        die "eval failed: $@\n" if $@;
    } @mp3;
}

if ( $options{'simple'} ){
    foreach my $mp3 ( @mp3 ){
        map { $mp3->{$_} = simple( $mp3->{$_} ) }
            qw/ artist album title /;
    }
}

# attach total tracks as '3/12'
map {
    my ( $t1, $t2 ) = split(/\//, $_->{'track'});
    $_->{'track'} = join('/', $t1+0, $total_tracks);
} @mp3;


#-------------------------------------
show(@mp3);


#-------------------------------------
# update tag
if ( $options{'update'} ){
    print "\n";
    if ( -f $cover ){
        $cover = do { my $f; open $f, '<', "$cover" and binmode $f or die; undef $/; <$f>};
    } 
    map { update($_, $cover) } @mp3;
}
exit(0);



#-------------------------------------

sub path2mp3 {
    my $path = shift;

    my $mt = MP3::Tag->new( $path );
    $mt->config("autoinfo","ID3v2","ID3v1","filename");
    my ( $title, $track, $artist, $album, $comment, $year, $genre ) = $mt->autoinfo();
    
    my $mp3;
    $mp3->{'path'} = $path;
    $mp3->{'name'} = decode_utf8( file( $path )->basename );
    $mp3->{'artist'} = $artist;
    $mp3->{'album'} = $album;
    $mp3->{'title'} = $title;
    $mp3->{'year'} = $year;
    $mp3->{'genre'} = $genre;
    $mp3->{'track'} = $track;
    return $mp3;
}

sub show {
    my @mp3 = @_;
    my $max = max_length( \@mp3 );
    my @cols = qw( artist album year genre track title );
    my $format = sprintf "%%-%ds - %%-%ds - %%-%ds - %%-%ds # %%%ds - %%-%ds\n", map { $max->{$_} } @cols;
    foreach my $mp3 ( @mp3 ){
        printf $format, map { ( not defined $_ or $_ eq '' ) ? '-' : $_ } map { $mp3->{$_} } @cols;
    }
}

sub update {
    my $mp3 = shift;
    my $cover = shift;
    
    my $mt = MP3::Tag->new($mp3->{'path'});
    my @tags = $mt->get_tags;

    # remove all old tags
    if ( exists $mt->{'ID3v1'}) {
        $mt->{'ID3v1'}->remove_tag();
    }
    if ( exists $mt->{'ID3v2'}) {
        $mt->{'ID3v2'}->remove_tag();
    }

    # new tag, 3 means 'utf-8'
    my $id3v2 = $mt->new_tag('ID3v2');
    if ( $options{'various'} ){
        $id3v2->add_frame("TPE1", 3, $mp3->{'artist'}); # artist
        $id3v2->add_frame("TPE2", 3, 'Various Artists'); # album artist
    }else{
        $id3v2->add_frame("TPE2", 3, $mp3->{'artist'}); # album artist
    }
    if ( $options{'disk'} ){
        $id3v2->add_frame("TPOS", 3, $options{'disk'});
    }
    $id3v2->add_frame("TALB", 3, $mp3->{'album'});
    $id3v2->add_frame("TRCK", 3, $mp3->{'track'});
    $id3v2->add_frame("TIT2", 3, $mp3->{'title'});
    $id3v2->add_frame("TYER", 3, $mp3->{'year'});
    $id3v2->add_frame("TCON", 3, $mp3->{'genre'});

    $id3v2->frame_select('APIC', '', undef, $cover ) if $cover;

    # save
    $id3v2->write_tag;
    $mt->close;
    printf "U %s\n", $mp3->{'name'};
}

sub max_length {
    my $mp3s = shift;
    my $max = {};
    foreach my $mp3 ( @$mp3s ){
        foreach ( keys %$mp3 ){
            my $len = length $mp3->{$_};
            if ( exists $max->{$_} ){
                $max->{$_} = $len if $len >= $max->{$_};
            }else{
                $max->{$_} = $len;
            }
        }
    }
    return $max;
}

sub iconv {
    my $string = shift;
    my $charset = shift;

    Encode::_utf8_off($string); 
    $string = encode('utf-8', decode($charset, $string) );
    Encode::_utf8_on( $string ) if not Encode::is_utf8( $string );
    return $string;
}

__END__

=head1 NAME

mptt - tidy the mp3 file's tag 

=head1 INSTALL

  perl Makefile.PL
  make
  sudo make install

=head1 SYNOPSIS

  cd new-mp3-album/
  mptt # view the current mp3 tags for mp3 files
  mptt -a 'Michael Jackson' -b 'Dangerous' # set artist and album name
  mptt -a 'Michael Jackson' -b 'Dangerous' -u # update
  ...

=head1 DESCRIPTION

See L<README.mkdn> for details.

=head1 LICENSE

same as Perl.

=head1 AUTHOR

chunzi <chunzi@gmail.com>
twitter @chunzi

=cut

